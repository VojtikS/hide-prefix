/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => HideFolderPrefixPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  delimiter: "_"
};
var HideFolderPrefixPlugin = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    this.addSettingTab(new HideFolderPrefixSettingTab(this.app, this));
    this.injectCSS();
    this.updateFolderNames();
    this.observeExplorer();
  }
  onunload() {
    this.removeCSS();
    this.clearCleanNames();
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
    this.updateFolderNames();
  }
  injectCSS() {
    this.removeCSS();
    const style = document.createElement("style");
    style.id = "hide-folder-prefix-style";
    style.textContent = `
      .nav-folder-title-content[data-clean-name] {
        color: transparent;
        position: relative;
      }

      .nav-folder-title-content[data-clean-name]::before {
        content: attr(data-clean-name);
        position: absolute;
        left: 0;
        color: var(--text-normal);
        white-space: pre;
      }
    `;
    document.head.appendChild(style);
  }
  removeCSS() {
    const existing = document.getElementById("hide-folder-prefix-style");
    if (existing)
      existing.remove();
  }
  observeExplorer() {
    const explorer = document.querySelector(".workspace");
    if (!explorer)
      return;
    const observer = new MutationObserver(() => this.updateFolderNames());
    observer.observe(explorer, { childList: true, subtree: true });
  }
  updateFolderNames() {
    const folders = document.querySelectorAll(".nav-folder-title-content");
    const { delimiter } = this.settings;
    folders.forEach((el) => {
      var _a;
      const fullName = (_a = el.textContent) != null ? _a : "";
      let cleaned = null;
      if (/^\d/.test(fullName) && delimiter && fullName.includes(delimiter)) {
        const parts = fullName.split(delimiter);
        if (parts.length > 1) {
          cleaned = parts.slice(1).join(delimiter);
        }
      }
      if (cleaned) {
        el.setAttribute("data-clean-name", cleaned);
      } else {
        el.removeAttribute("data-clean-name");
      }
    });
  }
  clearCleanNames() {
    const folders = document.querySelectorAll(".nav-folder-title-content");
    folders.forEach((el) => el.removeAttribute("data-clean-name"));
  }
};
var HideFolderPrefixSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Hide Folder Prefix Settings" });
    new import_obsidian.Setting(containerEl).setName("Delimiter").setDesc("Hide everything before and including this delimiter (e.g., '_', '-', or '::')").addText(
      (text) => text.setPlaceholder("_").setValue(this.plugin.settings.delimiter).onChange(async (value) => {
        this.plugin.settings.delimiter = value;
        await this.plugin.saveSettings();
      })
    );
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHsgUGx1Z2luLCBQbHVnaW5TZXR0aW5nVGFiLCBBcHAsIFNldHRpbmcgfSBmcm9tIFwib2JzaWRpYW5cIjtcclxuXHJcbi8vIFNldHRpbmdzIGludGVyZmFjZSBhbmQgZGVmYXVsdHNcclxuaW50ZXJmYWNlIEhpZGVGb2xkZXJQcmVmaXhTZXR0aW5ncyB7XHJcbiAgZGVsaW1pdGVyOiBzdHJpbmc7XHJcbn1cclxuXHJcbmNvbnN0IERFRkFVTFRfU0VUVElOR1M6IEhpZGVGb2xkZXJQcmVmaXhTZXR0aW5ncyA9IHtcclxuICBkZWxpbWl0ZXI6IFwiX1wiLFxyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgSGlkZUZvbGRlclByZWZpeFBsdWdpbiBleHRlbmRzIFBsdWdpbiB7XHJcbiAgc2V0dGluZ3M6IEhpZGVGb2xkZXJQcmVmaXhTZXR0aW5ncztcclxuXHJcbiAgYXN5bmMgb25sb2FkKCkge1xyXG4gICAgYXdhaXQgdGhpcy5sb2FkU2V0dGluZ3MoKTtcclxuICAgIHRoaXMuYWRkU2V0dGluZ1RhYihuZXcgSGlkZUZvbGRlclByZWZpeFNldHRpbmdUYWIodGhpcy5hcHAsIHRoaXMpKTtcclxuXHJcbiAgICB0aGlzLmluamVjdENTUygpO1xyXG4gICAgdGhpcy51cGRhdGVGb2xkZXJOYW1lcygpO1xyXG4gICAgdGhpcy5vYnNlcnZlRXhwbG9yZXIoKTtcclxuICB9XHJcblxyXG4gIG9udW5sb2FkKCkge1xyXG4gICAgdGhpcy5yZW1vdmVDU1MoKTtcclxuICAgIHRoaXMuY2xlYXJDbGVhbk5hbWVzKCk7XHJcbiAgfVxyXG5cclxuICBhc3luYyBsb2FkU2V0dGluZ3MoKSB7XHJcbiAgICB0aGlzLnNldHRpbmdzID0gT2JqZWN0LmFzc2lnbih7fSwgREVGQVVMVF9TRVRUSU5HUywgYXdhaXQgdGhpcy5sb2FkRGF0YSgpKTtcclxuICB9XHJcblxyXG4gIGFzeW5jIHNhdmVTZXR0aW5ncygpIHtcclxuICAgIGF3YWl0IHRoaXMuc2F2ZURhdGEodGhpcy5zZXR0aW5ncyk7XHJcbiAgICB0aGlzLnVwZGF0ZUZvbGRlck5hbWVzKCk7IC8vIFJlZnJlc2ggZm9sZGVyIG5hbWVzIG9uIHNldHRpbmdzIGNoYW5nZVxyXG4gIH1cclxuXHJcbiAgaW5qZWN0Q1NTKCkge1xyXG4gICAgdGhpcy5yZW1vdmVDU1MoKTtcclxuICAgIGNvbnN0IHN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO1xyXG4gICAgc3R5bGUuaWQgPSBcImhpZGUtZm9sZGVyLXByZWZpeC1zdHlsZVwiO1xyXG4gICAgc3R5bGUudGV4dENvbnRlbnQgPSBgXHJcbiAgICAgIC5uYXYtZm9sZGVyLXRpdGxlLWNvbnRlbnRbZGF0YS1jbGVhbi1uYW1lXSB7XHJcbiAgICAgICAgY29sb3I6IHRyYW5zcGFyZW50O1xyXG4gICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuICAgICAgfVxyXG5cclxuICAgICAgLm5hdi1mb2xkZXItdGl0bGUtY29udGVudFtkYXRhLWNsZWFuLW5hbWVdOjpiZWZvcmUge1xyXG4gICAgICAgIGNvbnRlbnQ6IGF0dHIoZGF0YS1jbGVhbi1uYW1lKTtcclxuICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgICAgICAgbGVmdDogMDtcclxuICAgICAgICBjb2xvcjogdmFyKC0tdGV4dC1ub3JtYWwpO1xyXG4gICAgICAgIHdoaXRlLXNwYWNlOiBwcmU7XHJcbiAgICAgIH1cclxuICAgIGA7XHJcbiAgICBkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKHN0eWxlKTtcclxuICB9XHJcblxyXG4gIHJlbW92ZUNTUygpIHtcclxuICAgIGNvbnN0IGV4aXN0aW5nID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJoaWRlLWZvbGRlci1wcmVmaXgtc3R5bGVcIik7XHJcbiAgICBpZiAoZXhpc3RpbmcpIGV4aXN0aW5nLnJlbW92ZSgpO1xyXG4gIH1cclxuXHJcbiAgb2JzZXJ2ZUV4cGxvcmVyKCkge1xyXG4gICAgY29uc3QgZXhwbG9yZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLndvcmtzcGFjZVwiKTtcclxuICAgIGlmICghZXhwbG9yZXIpIHJldHVybjtcclxuXHJcbiAgICBjb25zdCBvYnNlcnZlciA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKCgpID0+IHRoaXMudXBkYXRlRm9sZGVyTmFtZXMoKSk7XHJcbiAgICBvYnNlcnZlci5vYnNlcnZlKGV4cGxvcmVyLCB7IGNoaWxkTGlzdDogdHJ1ZSwgc3VidHJlZTogdHJ1ZSB9KTtcclxuICB9XHJcblxyXG4gIHVwZGF0ZUZvbGRlck5hbWVzKCkge1xyXG4gICAgY29uc3QgZm9sZGVycyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIubmF2LWZvbGRlci10aXRsZS1jb250ZW50XCIpO1xyXG4gICAgY29uc3QgeyBkZWxpbWl0ZXIgfSA9IHRoaXMuc2V0dGluZ3M7XHJcblxyXG4gICAgZm9sZGVycy5mb3JFYWNoKChlbCkgPT4ge1xyXG4gICAgICBjb25zdCBmdWxsTmFtZSA9IGVsLnRleHRDb250ZW50ID8/IFwiXCI7XHJcbiAgICAgIGxldCBjbGVhbmVkOiBzdHJpbmcgfCBudWxsID0gbnVsbDtcclxuXHJcbiAgICAgIGlmICgvXlxcZC8udGVzdChmdWxsTmFtZSkgJiYgZGVsaW1pdGVyICYmIGZ1bGxOYW1lLmluY2x1ZGVzKGRlbGltaXRlcikpIHtcclxuICAgICAgICBjb25zdCBwYXJ0cyA9IGZ1bGxOYW1lLnNwbGl0KGRlbGltaXRlcik7XHJcbiAgICAgICAgaWYgKHBhcnRzLmxlbmd0aCA+IDEpIHtcclxuICAgICAgICAgIGNsZWFuZWQgPSBwYXJ0cy5zbGljZSgxKS5qb2luKGRlbGltaXRlcik7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAoY2xlYW5lZCkge1xyXG4gICAgICAgIGVsLnNldEF0dHJpYnV0ZShcImRhdGEtY2xlYW4tbmFtZVwiLCBjbGVhbmVkKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBlbC5yZW1vdmVBdHRyaWJ1dGUoXCJkYXRhLWNsZWFuLW5hbWVcIik7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgY2xlYXJDbGVhbk5hbWVzKCkge1xyXG4gICAgY29uc3QgZm9sZGVycyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIubmF2LWZvbGRlci10aXRsZS1jb250ZW50XCIpO1xyXG4gICAgZm9sZGVycy5mb3JFYWNoKChlbCkgPT4gZWwucmVtb3ZlQXR0cmlidXRlKFwiZGF0YS1jbGVhbi1uYW1lXCIpKTtcclxuICB9XHJcbn1cclxuXHJcbmNsYXNzIEhpZGVGb2xkZXJQcmVmaXhTZXR0aW5nVGFiIGV4dGVuZHMgUGx1Z2luU2V0dGluZ1RhYiB7XHJcbiAgcGx1Z2luOiBIaWRlRm9sZGVyUHJlZml4UGx1Z2luO1xyXG5cclxuICBjb25zdHJ1Y3RvcihhcHA6IEFwcCwgcGx1Z2luOiBIaWRlRm9sZGVyUHJlZml4UGx1Z2luKSB7XHJcbiAgICBzdXBlcihhcHAsIHBsdWdpbik7XHJcbiAgICB0aGlzLnBsdWdpbiA9IHBsdWdpbjtcclxuICB9XHJcblxyXG4gIGRpc3BsYXkoKTogdm9pZCB7XHJcbiAgICBjb25zdCB7IGNvbnRhaW5lckVsIH0gPSB0aGlzO1xyXG4gICAgY29udGFpbmVyRWwuZW1wdHkoKTtcclxuXHJcbiAgICBjb250YWluZXJFbC5jcmVhdGVFbChcImgyXCIsIHsgdGV4dDogXCJIaWRlIEZvbGRlciBQcmVmaXggU2V0dGluZ3NcIiB9KTtcclxuXHJcbiAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcclxuICAgICAgLnNldE5hbWUoXCJEZWxpbWl0ZXJcIilcclxuICAgICAgLnNldERlc2MoXCJIaWRlIGV2ZXJ5dGhpbmcgYmVmb3JlIGFuZCBpbmNsdWRpbmcgdGhpcyBkZWxpbWl0ZXIgKGUuZy4sICdfJywgJy0nLCBvciAnOjonKVwiKVxyXG4gICAgICAuYWRkVGV4dCgodGV4dCkgPT5cclxuICAgICAgICB0ZXh0XHJcbiAgICAgICAgICAuc2V0UGxhY2Vob2xkZXIoXCJfXCIpXHJcbiAgICAgICAgICAuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MuZGVsaW1pdGVyKVxyXG4gICAgICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5kZWxpbWl0ZXIgPSB2YWx1ZTtcclxuICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XHJcbiAgICAgICAgICB9KVxyXG4gICAgICApO1xyXG4gIH1cclxufVxyXG4iXSwKICAibWFwcGluZ3MiOiAiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsc0JBQXVEO0FBT3ZELElBQU0sbUJBQTZDO0FBQUEsRUFDakQsV0FBVztBQUNiO0FBRUEsSUFBcUIseUJBQXJCLGNBQW9ELHVCQUFPO0FBQUEsRUFHekQsTUFBTSxTQUFTO0FBQ2IsVUFBTSxLQUFLLGFBQWE7QUFDeEIsU0FBSyxjQUFjLElBQUksMkJBQTJCLEtBQUssS0FBSyxJQUFJLENBQUM7QUFFakUsU0FBSyxVQUFVO0FBQ2YsU0FBSyxrQkFBa0I7QUFDdkIsU0FBSyxnQkFBZ0I7QUFBQSxFQUN2QjtBQUFBLEVBRUEsV0FBVztBQUNULFNBQUssVUFBVTtBQUNmLFNBQUssZ0JBQWdCO0FBQUEsRUFDdkI7QUFBQSxFQUVBLE1BQU0sZUFBZTtBQUNuQixTQUFLLFdBQVcsT0FBTyxPQUFPLENBQUMsR0FBRyxrQkFBa0IsTUFBTSxLQUFLLFNBQVMsQ0FBQztBQUFBLEVBQzNFO0FBQUEsRUFFQSxNQUFNLGVBQWU7QUFDbkIsVUFBTSxLQUFLLFNBQVMsS0FBSyxRQUFRO0FBQ2pDLFNBQUssa0JBQWtCO0FBQUEsRUFDekI7QUFBQSxFQUVBLFlBQVk7QUFDVixTQUFLLFVBQVU7QUFDZixVQUFNLFFBQVEsU0FBUyxjQUFjLE9BQU87QUFDNUMsVUFBTSxLQUFLO0FBQ1gsVUFBTSxjQUFjO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFjcEIsYUFBUyxLQUFLLFlBQVksS0FBSztBQUFBLEVBQ2pDO0FBQUEsRUFFQSxZQUFZO0FBQ1YsVUFBTSxXQUFXLFNBQVMsZUFBZSwwQkFBMEI7QUFDbkUsUUFBSTtBQUFVLGVBQVMsT0FBTztBQUFBLEVBQ2hDO0FBQUEsRUFFQSxrQkFBa0I7QUFDaEIsVUFBTSxXQUFXLFNBQVMsY0FBYyxZQUFZO0FBQ3BELFFBQUksQ0FBQztBQUFVO0FBRWYsVUFBTSxXQUFXLElBQUksaUJBQWlCLE1BQU0sS0FBSyxrQkFBa0IsQ0FBQztBQUNwRSxhQUFTLFFBQVEsVUFBVSxFQUFFLFdBQVcsTUFBTSxTQUFTLEtBQUssQ0FBQztBQUFBLEVBQy9EO0FBQUEsRUFFQSxvQkFBb0I7QUFDbEIsVUFBTSxVQUFVLFNBQVMsaUJBQWlCLDJCQUEyQjtBQUNyRSxVQUFNLEVBQUUsVUFBVSxJQUFJLEtBQUs7QUFFM0IsWUFBUSxRQUFRLENBQUMsT0FBTztBQTNFNUI7QUE0RU0sWUFBTSxZQUFXLFFBQUcsZ0JBQUgsWUFBa0I7QUFDbkMsVUFBSSxVQUF5QjtBQUU3QixVQUFJLE1BQU0sS0FBSyxRQUFRLEtBQUssYUFBYSxTQUFTLFNBQVMsU0FBUyxHQUFHO0FBQ3JFLGNBQU0sUUFBUSxTQUFTLE1BQU0sU0FBUztBQUN0QyxZQUFJLE1BQU0sU0FBUyxHQUFHO0FBQ3BCLG9CQUFVLE1BQU0sTUFBTSxDQUFDLEVBQUUsS0FBSyxTQUFTO0FBQUEsUUFDekM7QUFBQSxNQUNGO0FBRUEsVUFBSSxTQUFTO0FBQ1gsV0FBRyxhQUFhLG1CQUFtQixPQUFPO0FBQUEsTUFDNUMsT0FBTztBQUNMLFdBQUcsZ0JBQWdCLGlCQUFpQjtBQUFBLE1BQ3RDO0FBQUEsSUFDRixDQUFDO0FBQUEsRUFDSDtBQUFBLEVBRUEsa0JBQWtCO0FBQ2hCLFVBQU0sVUFBVSxTQUFTLGlCQUFpQiwyQkFBMkI7QUFDckUsWUFBUSxRQUFRLENBQUMsT0FBTyxHQUFHLGdCQUFnQixpQkFBaUIsQ0FBQztBQUFBLEVBQy9EO0FBQ0Y7QUFFQSxJQUFNLDZCQUFOLGNBQXlDLGlDQUFpQjtBQUFBLEVBR3hELFlBQVksS0FBVSxRQUFnQztBQUNwRCxVQUFNLEtBQUssTUFBTTtBQUNqQixTQUFLLFNBQVM7QUFBQSxFQUNoQjtBQUFBLEVBRUEsVUFBZ0I7QUFDZCxVQUFNLEVBQUUsWUFBWSxJQUFJO0FBQ3hCLGdCQUFZLE1BQU07QUFFbEIsZ0JBQVksU0FBUyxNQUFNLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQUVsRSxRQUFJLHdCQUFRLFdBQVcsRUFDcEIsUUFBUSxXQUFXLEVBQ25CLFFBQVEsK0VBQStFLEVBQ3ZGO0FBQUEsTUFBUSxDQUFDLFNBQ1IsS0FDRyxlQUFlLEdBQUcsRUFDbEIsU0FBUyxLQUFLLE9BQU8sU0FBUyxTQUFTLEVBQ3ZDLFNBQVMsT0FBTyxVQUFVO0FBQ3pCLGFBQUssT0FBTyxTQUFTLFlBQVk7QUFDakMsY0FBTSxLQUFLLE9BQU8sYUFBYTtBQUFBLE1BQ2pDLENBQUM7QUFBQSxJQUNMO0FBQUEsRUFDSjtBQUNGOyIsCiAgIm5hbWVzIjogW10KfQo=
